{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","_React$createElement","poster","alt","react_default","a","createElement","src","Object","defineProperty","MovieGenre","_ref3","genre","className","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","large_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","data","catch","err","console","log","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorker"],"mappings":"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","file":"static/js/main.37a4cff3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\n// class Movie extends Component {\n//     static propTypes = {\n//         title: PropTypes.string.isRequired,\n//         poster: PropTypes.string.isRequired\n//     }\n//     render(){\n//         return(\n//             <div className=\"Movie\">\n//                 <MoviePoster poster={this.props.poster}/>\n//                 <h1>{this.props.title}</h1>\n//             </div>\n//         );\n//     }\n// }\nfunction Movie({title, poster, genres, synopsis}){\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\n                </div>\n                <p className=\"Moive__Synopsis\">\n                <LinesEllipsis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                    /> \n                </p>\n            </div>\n        </div>\n    )\n}\n\n// class MoviePoster extends Component{\n//     static propTypes = {\n//         poster: PropTypes.string.isRequired\n//     }\n//     render(){\n//         return(\n//             <img src={this.props.poster} width='200' hegiht='200'/>\n//         );\n//     }\n// }\nfunction MoviePoster({poster,alt}){\n    return (\n        <img src={poster} alt=\"Movie Poster\" alt={alt} title={alt} className=\"Movie__Poster\" width='200' hegiht='200'/>\n    )\n}\n\nfunction MovieGenre({genre}){\n    return (\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired,\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\nexport default Movie;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  state = {};\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.large_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      );\n    });\n    return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi = () => {\n    return fetch(\n      \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n    )\n      .then(potato => potato.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ServiceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nServiceWorker();"],"sourceRoot":""}